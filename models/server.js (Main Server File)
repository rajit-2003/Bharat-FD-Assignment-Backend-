// server.js

const express = require('express');
const mongoose = require('mongoose');
const redis = require('redis');
const { translate } = require('@vitalets/google-translate-api');
const cors = require('cors');
const bodyParser = require('body-parser');
const morgan = require('morgan');
const rateLimit = require('express-rate-limit');
const jwt = require('jsonwebtoken');
const dotenv = require('dotenv');
const swaggerUi = require('swagger-ui-express');
const swaggerDocument = require('./swagger.json');

dotenv.config();
const app = express();

// Redis client
const client = redis.createClient();

// Middleware setup
app.use(cors());
app.use(bodyParser.json());
app.use(morgan('dev'));

// Rate limiting for security
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, 
  max: 100, 
  message: "Too many requests, please try again later."
});
app.use(limiter);

// MongoDB connection
mongoose.connect('mongodb://localhost:27017/faqs', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Swagger API documentation
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));

// Import routes
const authRoutes = require('./routes/authRoutes');
const faqRoutes = require('./routes/faqRoutes');
const adminRoutes = require('./routes/adminRoutes');

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/faqs', faqRoutes);
app.use('/admin', authenticate, adminRoutes); // Protecting admin routes

app.listen(process.env.PORT || 3000, () => {
  console.log('Server running on port 3000');
});


